Metadata-Version: 2.4
Name: spectral_playground
Version: 0.1.0
Summary: Spectral Unmixing Playground â€” synthesis and unmixing algorithms
Author: Anton Victorin
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.24
Requires-Dist: scipy>=1.10
Requires-Dist: scikit-learn>=1.2
Requires-Dist: PyYAML>=6.0
Requires-Dist: typer>=0.9
Requires-Dist: matplotlib>=3.6
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: hypothesis>=6.0; extra == "dev"

Spectral Unmixing Playground (Python)
====================================

Reproducible playground to synthesize spectral fluorescence datasets and benchmark unmixing algorithms.

Quick start
-----------

1) Install (inside a virtual environment):

- Install dependencies from `pyproject.toml` with your preferred tool.

2) Run an example experiment:

- Use the CLI module with a YAML config, e.g. `config/examples/overdetermined.yaml`.
 - Example Python invocation:
   - `python -m spectral_playground.experiments.run --cfg config/examples/overdetermined.yaml --seed 123`

Testing
-------

- Run your Python test runner on the `tests/` directory.

GUI
---

- Launch the GUI:
  - `python -m spectral_playground.gui.app`
  - Configure grid/channels/fluors/spatial/noise, select methods, then click Run.

Notes
-----

- Shapes: `Y` is `(L, P)`, `M` is `(L, K)`, `A` is `(K, P)`.
- Randomness uses `numpy.random.Generator(PCG64)` seeded from config for reproducibility.


